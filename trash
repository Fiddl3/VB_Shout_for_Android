<?php
class VBSold
{
   const VERSION = '1.0.1';
   private static $_vb;
   private static $_lang;
   private static $_user;
   private static $_instanceid;
   private static $_chatroomid;
   private static $_chatroom;
   private static $_instance;
   private static $_chatrooms;
   private static $_instances;
   private static $_activeusers;
   private static $_permissions;
   private static $_chrset;
   private static $_output = array();
   private static $_err
         = array(
            0  => 'mix',
            1  => 'sb-not-exist',
            2  => 'sb-not-active',
            3  => 'user-banned',
            4  => 'output-empty',
            5  => 'no-room-available',
            6  => 'error-while-fetching',
            7  => 'shout-not-exist',
            8  => 'error-while-saving',
            9  => 'invalid-instance',
            10 => 'no-access-to-instance',
            11 => 'no-access-to-any-instance',
            12 => 'no-access-to-room',
            13 => 'bad-try-try-after-15-min',
            14 => 'bad-try-wrong-username-or-password',
            15 => 'error-logout-bad-token',
            16 => 'vb-user-banned',

            99 => 'no-access-to-this-activity',
         );
   private static $_inf
         = array(
            0 => 'string',
            1 => 'nothing-new',
            2 => 'saving-success',
            3 => 'login-success',
            4 => 'logout-success',
            5 => 'shoutbox-pruned',
         );

   public static function init( vB_Registry $vb, array $lang )
   {
      self::$_vb   = $vb;
      self::$_lang = $lang;
      self::$_user = & $vb->userinfo;

      if ( !class_exists( 'VBSHOUT' ) )
         self::error( 1, 'sb-not-exist' );

      if ( !self::$_vb->options['dbtech_vbshout_active'] )
         self::error( 2, 'sb-not-active' );

      if ( self::$_user['dbtech_vbshout_banned'] )
         self::error( 3, 'user-banned' );

      if ( !(self::$_user['permissions']['forumpermissions'] & self::$_vb->bf_ugp_forumpermissions['canview']) )
         self::error( 16, 'vb-user-banned' );


      self::$_chatrooms   = & VBSHOUT::$cache['chatroom'];
      self::$_instances   = & VBSHOUT::$cache['instance'];
      self::$_chatroom    = & VBSHOUT::$chatroom; //TODO nieużywane
      self::$_instance    = & VBSHOUT::$instance;
      self::$_activeusers = & VBSHOUT::$activeusers; //TODO nieużywane
      self::$_permissions = & VBSHOUT::$permissions; //TODO nieużywane
   }

   public static function error( $code, $text )
   {
      $error = array('code' => $code, 'msg' => self::encode( $text ));
      self::output( 'error', self::encode( $error ) );
      self::output( 'return', (bool)false );
      self::render();
   }

   public static function encode( $val, $out = true )
   {
      if ( !class_exists( 'vB_Template_Runtime' ) )
         return $val;
      if ( empty($val) || is_bool( $val ) || is_numeric( $val ) || is_array( $val ) )
         return $val;


      if ( !isset(self::$_chrset) ) {
         self::$_chrset = trim( vB_Template_Runtime::fetchStyleVar( 'charset' ) );

         if ( preg_match( '/iso-?8859-?1/i', self::$_chrset ) )
            self::$_chrset = 'Windows-1252';

         elseif ( preg_match( '/iso-?8859-?(\d+)/i', self::$_chrset, $match_iso ) )
            self::$_chrset = 'ISO-8859-' . $match_iso[1];
         elseif ( preg_match( '/windows-?125(\d)/i', self::$_chrset, $match_win ) )
            self::$_chrset = 'Windows-125' . $match_win[1];
         else
            self::$_chrset = preg_replace( '/^x-/i', '', self::$_chrset );
      }


      if ( function_exists( 'mb_convert_encoding' ) && @mb_convert_encoding( 'string', self::$_chrset, 'UTF-8' ) ) {
         if ( $out )
            $val = @mb_convert_encoding( $val, 'UTF-8', self::$_chrset );
         else
            $val = @mb_convert_encoding( $val, self::$_chrset, 'UTF-8' );
      }
      elseif ( function_exists( 'iconv' ) && @iconv( self::$_chrset, 'UTF-8', 'test-str' ) ) {
         if ( $out )
            $val = @iconv( self::$_chrset, 'UTF-8//IGNORE', $val );
         else
            $val = @iconv( 'UTF-8', self::$_chrset . '//IGNORE', $val );
      }

      return $val;
   }

   public static function output( $key, $text )
   {
      self::$_output[$key] = $text;
   }

   public static function render()
   {
      if ( !isset(self::$_output['return']) )
         self::$_output['return'] = true;

      ob_end_clean();
      ob_start();

      header( 'Content-Type: application/json; charset=utf-8' );
      echo json_encode( self::$_output );

      // header( 'Content-Type: text/html; charset=utf-8' );
      // echo '<pre>';
      // print_r( self::$_output );

      exit;
   }

   public static function setInstance( $iid = null )
   {
      if ( $iid != 0 ) {
         if ( !self::$_instance = self::_getInstance( $iid ) )
            self::error( 9, 'invalid-instance-' . $iid );
         //elseif ( !self::$_instance['permissions_parsed']['canviewshoutbox'] )
         //  self::error( 10, 'no-access-to-instance-'. $iid );
         else
            return (bool)(self::$_instanceid = $iid);
      }

      if ( empty(self::$_instances) ) {
         self::error( 11, 'no-instance-available' );

         return false;
      }

      foreach ( self::$_instances as $instance ) {
         if ( $instance['permissions_parsed']['canviewshoutbox'] ) {
            self::$_instance   = $instance;
            self::$_instanceid = $instance['instanceid'];

            return true;
         }
      }



      foreach ( self::$_instances as $instance ) {
         self::$_instance   = $instance;
         self::$_instanceid = $instance['instanceid'];

         return true;
      }

      return false;
   }

   private static function _getInstance( $iid = -1 )
   {
      if ( $iid == -1 )
         $iid = self::$_instanceid;

      return isset(self::$_instances[$iid]) ? self::$_instances[$iid] : null;
   }

   public static function setChatroom( $rid )
   {
      if ( $rid == 0 ) {
         self::$_chatroomid = $rid;

         return true;
      }

      $room = self::_getChatroom( $rid );

      if ( is_null( $room ) || !self::canAccess( $room ) || !$room['active'] )
         self::error( 12, 'no-access-to-room-' . $rid );

      self::$_chatroomid = $rid;

      return true;
   }

   private static function _getChatroom( $rid = -1 )
   {
      if ( $rid == -1 )
         $rid = self::$_chatroomid;

      return isset(self::$_chatrooms[$rid]) ? self::$_chatrooms[$rid] : null;
   }

   public static function shoutSync_()
   {
      Output::output( 'lastup', self::getAop( $iId, $rId ) );

      self::roomList_();

      $tmp = self::fetchShouts();

      if ( is_null( $tmp ) )
         return;
      elseif ( empty($tmp) )
         self::error( 6, 'error-while-fetching' );
      else
         self::output( 'shouts', $tmp );

   }

   public static function getAop( $iId, $rId, $marked = true )
   {
      $iId = (int)$iId;
      $rId = (int)$rId;

      $path = DIR . '/dbtech/vbshout/aop/';
      if ( $marked )
         $path .= 'markread-';

      $tab = ((!$rId) ? 'shouts' . $iId : "chatroom_{$rId}_{$iId}") . '.txt';

      $t = intval( @file_get_contents( $path . $tab ) );

      if ( !$iId )
         return $t;

      $t2 = self::getAop( 0, $rId, $marked );

      return max( $t, $t2 );
   }

   public static function roomList_()
   {
      $tmp = self::fetchRooms();

      if ( empty($tmp) )
         self::error( 5, 'no-room-available' );

      self::output( 'rooms', $tmp );
   }

   public static function fetchRooms()
   {
      require(DIR . '/includes/html_color_names.php');
      $rList = array();

      if ( !empty(self::$_instances) ) {
         foreach ( self::$_instances as $room )
            if ( $room['active'] && $room['permissions_parsed']['canviewshoutbox'] )
               $rList[] = array(
                  'rid'    => 0,
                  'iid'    => (int)$room['instanceid'],
                  'color'  => '',
                  'title'  => strip_tags( $room['name'] ),
                  'marked' => VBS::getAop( $room['instanceid'], 0 ),
               );
      }

      if ( !empty(self::$_chatrooms) ) {
         foreach ( self::$_chatrooms as $room )
            if ( $room['active'] && self::canAccess( $room ) )
               $rList[] = array(
                  'rid'    => (int)$room['chatroomid'],
                  'iid'    => (int)$iId = ($room['instanceid'] ? : self::$_instance['instanceid']),
                  'color'  => preg_match( '/[=\'"; ]color[=:"\']+([ a-zA-Z0-9\#]+)[;\'"\]]+/is', ($room['title']), $m ) ? ((substr( $color = trim( $m[1] ), 0, 1 ) != '#') ? (isset($html_color_names[strtolower( $color )]) ? '#' . $html_color_names[strtolower( $color )] : '') : $color) : '',
                  'title'  => strip_tags( $room['title'] ),
                  'marked' => VBS::getAop( $iId, $room['chatroomid'] ),
               );

      }

      return $rList;
   }

   public static function canAccess( array $where, array $user = array() )
   {
      if ( empty($user) )
         $user = & self::$_user;

      if ( !isset($user['membergroupids']) )
         return false;

      if ( !isset($where['membergroupids']) )
         return isset($where['members'][$user['userid']]);

      return (bool)array_intersect( explode( ',', $user['usergroupid'] . ',' . $user['membergroupids'] ), explode( ',', $where['membergroupids'] ) );
   }

   public static function fetchShouts( $num = null )
   {
      if ( !self::$_instance && (!self::$_instance = self::_getInstance()) )
         return false;
      if ( !self::$_instance['permissions_parsed']['canviewshoutbox'] )
         self::error( 10, 'no-access-to-instance' );

      $fetchQ = self::$_vb->db->query_read_slave( "
      SELECT
        user.avatarid,
        user.avatarrevision,
        user.username,
        user.usergroupid,
        user.membergroupids,
        user.infractiongroupid,
        user.dbtech_vbshout_settings AS shoutsettings,
        user.dbtech_vbshout_shoutstyle AS shoutstyle,
        user.dbtech_vbshout_banned AS banned,
        usergroup.opentag,
        vbshout.*
        " . (self::$_vb->options['avatarenabled'] ? ', avatar.avatarpath, NOT ISNULL(customavatar.userid) AS hascustomavatar, customavatar.dateline AS avatardateline, customavatar.width AS avwidth, customavatar.height AS avheight, customavatar.height_thumb AS avheight_thumb, customavatar.width_thumb AS avwidth_thumb, customavatar.filedata_thumb' : '') . ",
        pmuser.username AS pmusername

      FROM " . TABLE_PREFIX . "dbtech_vbshout_shout AS vbshout
      LEFT JOIN " . TABLE_PREFIX . "user AS user ON(user.userid = vbshout.userid)
      LEFT JOIN " . TABLE_PREFIX . "usergroup AS usergroup ON(usergroup.usergroupid = IF( user.displaygroupid =0, user.usergroupid, user.displaygroupid ))" .
                                                  (self::$_vb->options['avatarenabled'] ? "
      LEFT JOIN " . TABLE_PREFIX . "avatar AS avatar ON (avatar.avatarid = user.avatarid)
      LEFT JOIN " . TABLE_PREFIX . "customavatar AS customavatar ON (customavatar.userid = user.userid)" : ''
                                                  ) . "
      LEFT JOIN " . TABLE_PREFIX . "user AS pmuser ON(pmuser.userid = vbshout.id)
      WHERE
        vbshout.instanceid IN(-1, 0, " . intval( self::$_instance['instanceid'] ) . ")
        AND vbshout.userid NOT IN(
          SELECT ignoreuserid
          FROM " . TABLE_PREFIX . "dbtech_vbshout_ignorelist AS ignorelist
          WHERE userid = " . self::$_user['userid'] . "
        )
        AND vbshout.chatroomid = " . intval( self::$_chatroomid )

                                                  . (is_null( $num ) ? " AND vbshout.dateline > " . (self::$_vb->GPC['lastupdate']) : '') .

                                                  ' AND (
                                                     vbshout.userid IN(-1, ' . self::$_user['userid'] . ') OR
          vbshout.id IN(0, ' . self::$_user['userid'] . ')
        )
         AND vbshout.userid NOT IN(
	SELECT userid
	FROM ' . TABLE_PREFIX . 'user AS user
	WHERE dbtech_vbshout_silenced = 1
		AND userid != ' . self::$_user['userid'] . '
)
      ORDER BY shoutid DESC
      LIMIT ' . ($num ? $num : 100)
      );

      if ( !self::$_vb->db->num_rows( $fetchQ ) )
         return null;


      $i    = 1;
      $list = array();
      require(DIR . '/includes/html_color_names.php');

      while ( $shout = self::$_vb->db->fetch_array( $fetchQ ) ) {
         VBSHOUT::parse_action_codes( $shout['message_raw'], $shout['type'] );

         $nShout            = array();
         $nShout['shoutid'] = (int)$shout['shoutid'];
         $nShout['time']    = (int)$shout['dateline'];
         // $nShout['instanceid']   = (int) $shout['instanceid'];
         // $nShout['chatroomid']   = (int) $shout['chatroomid'];
         $nShout['msg'] = trim( self::encode( $shout['message_raw'] ) );

         $nShout['notification'] = $shout['notification'];


         $nShout['userid'] = (int)$shout['userid'];
         // $nShout['usergroupid']  = (int) $shout['usergroupid'];
         $nShout['username'] = self::encode( $shout['username'] );
         $nShout['uban']     = (bool)$shout['banned'];
         //$nShout['avatar']       = 'default';
         $nShout['ucolor']  = preg_match( '/[=\'"; ]color[=:"\']+([ a-zA-Z0-9\#]+)[;\'"\]]+/is', $shout['opentag'], $m ) ? ((substr( $color = trim( $m[1] ), 0, 1 ) != '#') ? (isset($html_color_names[strtolower( $color )]) ? '#' . $html_color_names[strtolower( $color )] : '') : $color) : '';
         $nShout['ubold']   = (bool)((stripos( $shout['opentag'], '<b>' ) !== false) || (stripos( $shout['opentag'], 'strong' ) !== false) || (stripos( $shout['opentag'], 'bold' ) !== false));
         $nShout['uitalic'] = (bool)((stripos( $shout['opentag'], '<i>' ) !== false) || (stripos( $shout['opentag'], 'italic' ) !== false));

         $nShout['pm_uid']   = (int)$shout['id'];
         $nShout['pm_uname'] = self::encode( $shout['pmusername'] );

         $nShout['canban']  = (bool)(($shout['userid'] != self::$_user['userid']) && (self::$_instance['permissions_parsed']['canban']) && (!VBSHOUT::check_protected_usergroup( $shout, true )));
         $nShout['canpm']   = (bool)((self::$_instance['permissions_parsed']['canpm']) && ($shout['userid'] > -1) && ($shout['userid'] != self::$_user['userid']));
         $nShout['canedit'] = (bool)((($shout['userid'] == self::$_user['userid']) && (self::$_instance['permissions_parsed']['caneditown'])) || (self::$_instance['permissions_parsed']['caneditothers']));


         if ( $shout['userid'] == -1 )
            $nShout['username'] = self::encode( self::$_lang['dbtech_vbshout_system'] );

         if ( !$shout['shoutstyle'] = unserialize( $shout['shoutstyle'] ) )
            $shout['shoutstyle'] = array();

         $iid = self::$_instance['instanceid'];

         $style = isset($shout['shoutstyle'][$iid]) ? $shout['shoutstyle'][$iid] : array('color' => '', 'bold' => '', 'italic' => '');

         $nShout['scolor']  = (substr( $style['color'], 0, 1 ) != '#') ? (isset($html_color_names[strtolower( $style['color'] )]) ? '#' . $html_color_names[strtolower( $style['color'] )] : ((substr( $style['color'], 0, 3 ) == 'rgb') ? (preg_match( '#rgb\( ?([0-9]+), ?([0-9]+), ?([0-9]+) ?\)#', $style['color'], $m ) ? ('#' . str_pad( dechex( $m[1] ), 2, "0", STR_PAD_LEFT ) . str_pad( dechex( $m[2] ), 2, "0", STR_PAD_LEFT ) . str_pad( dechex( $m[3] ), 2, "0", STR_PAD_LEFT )) : '') : '')) : $style['color'];
         $nShout['sbold']   = (bool)$style['bold'];
         $nShout['sitalic'] = (bool)$style['italic'];

         unset($style);

         switch ( $shout['type'] ) {
            case VBSHOUT::$shouttypes['shout']:
               $nShout['type'] = 'shout';
               break;

            case VBSHOUT::$shouttypes['pm']:
               $nShout['type'] = 'pm';
               if ( strpos( $nShout['msg'], '/pm' ) === 0 )
                  $nShout['msg'] = trim( substr( $nShout['msg'], strpos( $nShout['msg'], ';' ) + 1 ) );
               break;

            case VBSHOUT::$shouttypes['me']:
            case VBSHOUT::$shouttypes['notif']:
               $nShout['type'] = 'me';
               break;

            case VBSHOUT::$shouttypes['system']:
               if ( strpos( $shout['message_raw'], '/prune' ) !== false || strpos( $shout['message_raw'], '/unsilence' ) !== false || strpos( $shout['message_raw'], '/silence' ) !== false )
                  $nShout['type'] = 'reload';
               else
                  $nShout['type'] = 'system';

               $nShout['msg'] = self::encode( strip_tags( $shout['message'] ) );
               break;

            default:
               $nShout['type'] = 'shout';
         }

         if ( $shout['userid'] == -1 )
            $nShout['type'] = 'system';

         ///////////////////////////////////////
         // $nShout['message'] = $nShout['msg'];
         ///////////////////////////////////////


         $list[] = $nShout;
         unset($nShout);

         $i++;
      }

      return array_reverse( $list );
   }

   public static function saveShout_()
   {
      $type = (VBSHOUT::$shouttypes[self::$_vb->GPC['type']] ? self::$_vb->GPC['type'] : 'shout');

      $nShout = VBSHOUT::datamanager_init( 'Shout', self::$_vb, ERRTYPE_ARRAY );

      $nShout->set_info( 'instance', self::$_instance );

      if ( self::$_vb->GPC['shoutid'] ) {
         if ( !$shout = self::$_vb->db->query_first_slave( 'SELECT * FROM ' . TABLE_PREFIX . 'dbtech_vbshout_shout WHERE shoutid = ' . self::$_vb->GPC['shoutid'] ) )
            self::error( 7, 'shout-not-exist' );

         $nShout->set_existing( $shout );
         $nShout->set( 'message', self::$_vb->GPC['message'] );
      }
      else {
         $nShout->set( 'id', self::$_vb->GPC['pmuserid'] );
         $nShout->set( 'message', self::$_vb->GPC['message'] );
         $nShout->set( 'type', VBSHOUT::$shouttypes[$type] );
         $nShout->set( 'instanceid', (isset(self::$_chatrooms[self::$_vb->GPC['chatroom']]) ? self::$_chatrooms[self::$_vb->GPC['chatroom']]['instanceid'] : self::$_instance['instanceid']) );
         $nShout->set( 'chatroomid', self::$_vb->GPC['chatroom'] );
      }

      require_once(DIR . '/includes/class_bbcode.php');

      VBSHOUT::$tag_list = fetch_tag_list( '', true );

      $nShout->save();

      if ( !empty($nShout->errors) ) {
         foreach ( $nShout->errors as $e )
            self::info( $e );

         self::error( 8, 'error-while-saving' );
      }


      if ( $type == 'pm' )
         VBSHOUT::set_aop( 'pm_' . self::$_vb->GPC['pmuserid'] . '_', self::$_instance['instanceid'], false );

      if ( self::$_vb->GPC['chatroom'] )
         VBSHOUT::set_aop( 'chatroom_' . self::$_vb->GPC['chatroom'] . '_', self::$_instance['instanceid'] );

      VBSHOUT::set_aop( 'shouts', self::$_instance['instanceid'] );

      self::info( 'saving-success', 2 );
      self::output( 'return', true );
   }

   public static function info( $text, $code = 0 )
   {
      $info = array('code' => $code, 'msg' => self::encode( $text ));
      if ( !empty(self::$_output['info']) )
         self::$_output['info'][] = $info;
      else
         self::$_output['info'][0] = $info;
   }

   public static function deleteShout_()
   {
      $nShout = VBSHOUT::datamanager_init( 'Shout', self::$_vb, ERRTYPE_ARRAY );
      $nShout->set_info( 'instance', self::$_instance );

      if ( !self::$_vb->GPC['shoutid'] )
         self::error( 7, 'shout-not-exist' );
      else {
         if ( !$shout = self::$_vb->db->query_first_slave( 'SELECT * FROM ' . TABLE_PREFIX . 'dbtech_vbshout_shout WHERE shoutid = ' . self::$_vb->GPC['shoutid'] ) )
            self::error( 7, 'shout-not-exist' );

         $nShout->set_existing( $shout );

         $flag = $nShout->delete();

         if ( $flag ) {
            if ( self::$_vb->GPC['chatroom'] )
               VBSHOUT::set_aop( 'chatroom_' . self::$_vb->GPC['chatroom'] . '_', self::$_instance['instanceid'] );
            VBSHOUT::set_aop( 'shouts', self::$_instance['instanceid'] );
         }

         self::output( 'return', (bool)$flag );
      }
   }

   public static function userInfo_()
   {
      $info = self::getUserInfo();
      self::output( 'user', $info );
      self::output( 'return', (bool)$info['userid'] );
   }

   public static function getUserInfo()
   {
      $user                 = array();
      $user['userid']       = self::$_user['userid'];
      $user['username']     = self::encode( self::$_user['username'] );
      $user['usergroupid']  = self::$_user['usergroupid'];
      $user['usergroup']    = self::encode( self::$_user['permissions']['title'] );
      $user['usertitle']    = self::encode( self::$_user['permissions']['usertitle'] );
      $user['lastactivity'] = self::$_user['lastactivity'];
      $user['lang']         = self::$_user['lang_code'];
      $user['token']        = self::$_user['securitytoken'];

      $user['canviewshoutbox'] = (bool)self::$_instance['permissions_parsed']['canviewshoutbox'];
      $user['canviewarchive']  = (bool)self::$_instance['permissions_parsed']['canviewarchive'];
      $user['canshout']        = (bool)self::$_instance['permissions_parsed']['canshout'];
      $user['canprune']        = (bool)self::$_instance['permissions_parsed']['canprune'];
      $user['canban']          = (bool)self::$_instance['permissions_parsed']['canban'];
      $user['isprotected']     = (bool)self::$_instance['permissions_parsed']['isprotected'];

      return $user;
   }

   public static function shoutList_()
   {
      Output::output( 'lastbu', self::getAop( $iId, $rId ) );

      self::instanceInfo_();

      if ( defined( 'LIST_ACTUAL' ) )
         return;

      $num = self::$_vb->GPC['fetchcount'];
      $tmp = self::fetchShouts( $num ? $num : 10 );

      if ( is_null( $tmp ) )
         return;
      elseif ( count( $tmp ) < $num )
         self::info( 'shoutbox-pruned', 5 );

      if ( empty($tmp) )
         self::error( 6, 'error-while-fetching' );
      else
         self::output( 'shouts', $tmp );

   }

   public static function instanceInfo_()
   {
      $tmp           = array();
      $tmp['id']     = (int)self::$_instance['instanceid'];
      $tmp['active'] = (bool)self::$_instance['active'];
      $tmp['name']   = strip_tags( self::$_instance['name'] );
      // $tmp['description'] = strip_tags( self::$_instance['description'] );
      $tmp['maxshouts']      = (int)self::$_instance['options']['maxshouts'];
      $tmp['floodchecktime'] = (int)self::$_instance['options']['floodchecktime'];
      $tmp['maxchars']       = (int)self::$_instance['options']['maxchars'];
      $tmp['maximages']      = (int)self::$_instance['options']['maximages'];
      $tmp['idletimeout']    = (int)self::$_instance['options']['idletimeout'];
      $tmp['refresh']        = (int)self::$_instance['options']['refresh'];
      $tmp['enablepms']      = (bool)self::$_instance['options']['enablepms'];
      $tmp['enablepmnotifs'] = (bool)self::$_instance['options']['enablepmnotifs'];
      $tmp['enablesysmsg']   = (bool)self::$_instance['options']['enable_sysmsg'];

      self::output( 'instance', $tmp );
      self::output( 'user', self::getUserInfo() );
      self::roomList_();
      self::output( 'return', (bool)self::$_instance['permissions_parsed']['canviewshoutbox'] );
   }

   public static function devInfo_()
   {
      self::output( 'VBS_version', self::VERSION );
      self::output( 'version', VBSHOUT::$version );
      self::output( 'versionno', VBSHOUT::$versionnumber );
      self::output( 'pro', VBSHOUT::$isPro );
      self::output( 'vbversion', self::$_vb->versionnumber );

      self::render();
   }

   public static function login_()
   {
      require_once(DIR . '/includes/functions_login.php');

      if ( verify_strike_status( self::$_vb->GPC['username'], true ) === false )
         self::error( 13, 'bad-try-try-after-15-min' );

      if ( !verify_authentication( self::$_vb->GPC['username'], null, self::$_vb->GPC['md5password'], self::$_vb->GPC['md5password'], self::$_vb->GPC['cookieuser'], true ) ) {
         exec_strike_user( self::$_user['username'] );

         self::error( 14, 'bad-try-wrong-username-or-password' );
      }

      self::$_vb->session->created = false;

      exec_unstrike_user( self::$_vb->GPC['username'] );
      process_new_login( self::$_vb->GPC['logintype'], self::$_vb->GPC['cookieuser'], null );

      $user             = array();
      $user['userid']   = self::$_user['userid'];
      $user['username'] = self::$_user['username'];
      $user['token']    = self::$_user['securitytoken'];

      self::info( 'login-success', 3 );
      self::output( 'return', true );
      self::output( 'user', $user );
   }

   public static function logout_()
   {
      require_once(DIR . '/includes/functions_login.php');


      if ( self::$_user['userid'] != 0 AND !verify_security_token( self::$_vb->GPC['token'], self::$_user['securitytoken_raw'] ) )
         self::error( 15, 'error-logout-bad-token' );

      process_logout();

      self::output( 'return', true );
      self::info( 'logout-success', 4 );
   }

   public static function encodeGPC( array $keys )
   {
      foreach ( $keys as $key )
         self::$_vb->GPC[$key] = self::encode( self::$_vb->GPC[$key], false );
   }


}